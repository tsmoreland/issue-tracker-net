// <auto-generated />
using System;
using IssueTracker.Issues.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IssueTracker.Issues.Infrastructure.Data.Migrations
{
    [DbContext(typeof(IssuesDbContext))]
    [Migration("20221204125534_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.0");

            modelBuilder.Entity("IssueTracker.Issues.Domain.ModelAggregates.IssueAggregate.Issue", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<ulong>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0ul);

                    b.Property<long>("LastModifiedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<IssueStateValue>("State")
                        .HasColumnType("INTEGER");

                    b.Property<string>("_description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("TEXT")
                        .HasColumnName("Description");

                    b.Property<string>("_epicId")
                        .HasColumnType("TEXT")
                        .HasColumnName("EpicId");

                    b.Property<int>("_issueNumber")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IssueNumber");

                    b.Property<string>("_projectId")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("ProjectId");

                    b.Property<long?>("_startTime")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("_stopTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("_title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("TEXT")
                        .HasColumnName("Title");

                    b.Property<int>("_type")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Type");

                    b.HasKey("Id");

                    b.HasIndex("Priority");

                    b.HasIndex("_epicId");

                    b.HasIndex("_issueNumber");

                    b.HasIndex("_projectId");

                    b.HasIndex("_title");

                    b.ToTable("Issues", (string)null);
                });

            modelBuilder.Entity("IssueTracker.Issues.Domain.ModelAggregates.IssueAggregate.IssueLink", b =>
                {
                    b.Property<string>("ParentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ChildId")
                        .HasColumnType("TEXT");

                    b.Property<int>("LinkType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.HasKey("ParentId", "ChildId");

                    b.HasIndex("ChildId");

                    b.ToTable("IssueLinks", (string)null);
                });

            modelBuilder.Entity("IssueTracker.Issues.Domain.ModelAggregates.IssueAggregate.Project", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<ulong>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0ul);

                    b.Property<long>("LastModifiedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("Name");

                    b.ToTable("Projects", (string)null);
                });

            modelBuilder.Entity("IssueTracker.Issues.Domain.ModelAggregates.IssueAggregate.Issue", b =>
                {
                    b.HasOne("IssueTracker.Issues.Domain.ModelAggregates.IssueAggregate.Issue", null)
                        .WithMany()
                        .HasForeignKey("_epicId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("IssueTracker.Issues.Domain.ModelAggregates.IssueAggregate.Project", "Project")
                        .WithMany()
                        .HasForeignKey("_projectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("IssueTracker.Issues.Domain.ModelAggregates.IssueAggregate.User", "Assignee", b1 =>
                        {
                            b1.Property<string>("IssueId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("FullName")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(200)
                                .IsUnicode(true)
                                .HasColumnType("TEXT")
                                .HasDefaultValue("Unassigned");

                            b1.Property<Guid>("UserId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("TEXT")
                                .HasDefaultValue(new Guid("00000000-0000-0000-0000-000000000000"));

                            b1.HasKey("IssueId");

                            b1.ToTable("Issues");

                            b1.WithOwner()
                                .HasForeignKey("IssueId");
                        });

                    b.OwnsOne("IssueTracker.Issues.Domain.ModelAggregates.IssueAggregate.User", "Reporter", b1 =>
                        {
                            b1.Property<string>("IssueId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("FullName")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(200)
                                .IsUnicode(true)
                                .HasColumnType("TEXT")
                                .HasDefaultValue("Unassigned");

                            b1.Property<Guid>("UserId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("TEXT")
                                .HasDefaultValue(new Guid("00000000-0000-0000-0000-000000000000"));

                            b1.HasKey("IssueId");

                            b1.ToTable("Issues");

                            b1.WithOwner()
                                .HasForeignKey("IssueId");
                        });

                    b.Navigation("Assignee");

                    b.Navigation("Project");

                    b.Navigation("Reporter");
                });

            modelBuilder.Entity("IssueTracker.Issues.Domain.ModelAggregates.IssueAggregate.IssueLink", b =>
                {
                    b.HasOne("IssueTracker.Issues.Domain.ModelAggregates.IssueAggregate.Issue", "Parent")
                        .WithMany("_children")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IssueTracker.Issues.Domain.ModelAggregates.IssueAggregate.Issue", "Child")
                        .WithMany("_parents")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("IssueTracker.Issues.Domain.ModelAggregates.IssueAggregate.Issue", b =>
                {
                    b.Navigation("_children");

                    b.Navigation("_parents");
                });
#pragma warning restore 612, 618
        }
    }
}
