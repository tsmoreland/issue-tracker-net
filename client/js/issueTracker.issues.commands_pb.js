// source: issueTracker.issues.commands.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var issueTracker_issues_shared_pb = require('./issueTracker.issues.shared_pb.js');
goog.object.extend(proto, issueTracker_issues_shared_pb);
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
goog.exportSymbol('proto.AddIssueMessage', null, global);
goog.exportSymbol('proto.EditIssueMessage', null, global);
goog.exportSymbol('proto.IssueCommandMessage', null, global);
goog.exportSymbol('proto.ResetDatabaseMesssage', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AddIssueMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AddIssueMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AddIssueMessage.displayName = 'proto.AddIssueMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EditIssueMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EditIssueMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.EditIssueMessage.displayName = 'proto.EditIssueMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ResetDatabaseMesssage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ResetDatabaseMesssage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ResetDatabaseMesssage.displayName = 'proto.ResetDatabaseMesssage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IssueCommandMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IssueCommandMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.IssueCommandMessage.displayName = 'proto.IssueCommandMessage';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AddIssueMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.AddIssueMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AddIssueMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AddIssueMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    project: jspb.Message.getFieldWithDefault(msg, 1, ""),
    title: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, ""),
    priority: jspb.Message.getFieldWithDefault(msg, 4, 0),
    type: jspb.Message.getFieldWithDefault(msg, 5, 0),
    assignee: (f = msg.getAssignee()) && issueTracker_issues_shared_pb.MaintainerMessage.toObject(includeInstance, f),
    reporter: (f = msg.getReporter()) && issueTracker_issues_shared_pb.TriageUserMessage.toObject(includeInstance, f),
    epicid: (f = msg.getEpicid()) && issueTracker_issues_shared_pb.OptionalString.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AddIssueMessage}
 */
proto.AddIssueMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AddIssueMessage;
  return proto.AddIssueMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AddIssueMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AddIssueMessage}
 */
proto.AddIssueMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProject(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {!proto.Priority} */ (reader.readEnum());
      msg.setPriority(value);
      break;
    case 5:
      var value = /** @type {!proto.IssueType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 6:
      var value = new issueTracker_issues_shared_pb.MaintainerMessage;
      reader.readMessage(value,issueTracker_issues_shared_pb.MaintainerMessage.deserializeBinaryFromReader);
      msg.setAssignee(value);
      break;
    case 7:
      var value = new issueTracker_issues_shared_pb.TriageUserMessage;
      reader.readMessage(value,issueTracker_issues_shared_pb.TriageUserMessage.deserializeBinaryFromReader);
      msg.setReporter(value);
      break;
    case 8:
      var value = new issueTracker_issues_shared_pb.OptionalString;
      reader.readMessage(value,issueTracker_issues_shared_pb.OptionalString.deserializeBinaryFromReader);
      msg.setEpicid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AddIssueMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AddIssueMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AddIssueMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AddIssueMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProject();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPriority();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getAssignee();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      issueTracker_issues_shared_pb.MaintainerMessage.serializeBinaryToWriter
    );
  }
  f = message.getReporter();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      issueTracker_issues_shared_pb.TriageUserMessage.serializeBinaryToWriter
    );
  }
  f = message.getEpicid();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      issueTracker_issues_shared_pb.OptionalString.serializeBinaryToWriter
    );
  }
};


/**
 * optional string Project = 1;
 * @return {string}
 */
proto.AddIssueMessage.prototype.getProject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.AddIssueMessage} returns this
 */
proto.AddIssueMessage.prototype.setProject = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Title = 2;
 * @return {string}
 */
proto.AddIssueMessage.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.AddIssueMessage} returns this
 */
proto.AddIssueMessage.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string Description = 3;
 * @return {string}
 */
proto.AddIssueMessage.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.AddIssueMessage} returns this
 */
proto.AddIssueMessage.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional Priority Priority = 4;
 * @return {!proto.Priority}
 */
proto.AddIssueMessage.prototype.getPriority = function() {
  return /** @type {!proto.Priority} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.Priority} value
 * @return {!proto.AddIssueMessage} returns this
 */
proto.AddIssueMessage.prototype.setPriority = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional IssueType Type = 5;
 * @return {!proto.IssueType}
 */
proto.AddIssueMessage.prototype.getType = function() {
  return /** @type {!proto.IssueType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.IssueType} value
 * @return {!proto.AddIssueMessage} returns this
 */
proto.AddIssueMessage.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional MaintainerMessage Assignee = 6;
 * @return {?proto.MaintainerMessage}
 */
proto.AddIssueMessage.prototype.getAssignee = function() {
  return /** @type{?proto.MaintainerMessage} */ (
    jspb.Message.getWrapperField(this, issueTracker_issues_shared_pb.MaintainerMessage, 6));
};


/**
 * @param {?proto.MaintainerMessage|undefined} value
 * @return {!proto.AddIssueMessage} returns this
*/
proto.AddIssueMessage.prototype.setAssignee = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.AddIssueMessage} returns this
 */
proto.AddIssueMessage.prototype.clearAssignee = function() {
  return this.setAssignee(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AddIssueMessage.prototype.hasAssignee = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional TriageUserMessage Reporter = 7;
 * @return {?proto.TriageUserMessage}
 */
proto.AddIssueMessage.prototype.getReporter = function() {
  return /** @type{?proto.TriageUserMessage} */ (
    jspb.Message.getWrapperField(this, issueTracker_issues_shared_pb.TriageUserMessage, 7));
};


/**
 * @param {?proto.TriageUserMessage|undefined} value
 * @return {!proto.AddIssueMessage} returns this
*/
proto.AddIssueMessage.prototype.setReporter = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.AddIssueMessage} returns this
 */
proto.AddIssueMessage.prototype.clearReporter = function() {
  return this.setReporter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AddIssueMessage.prototype.hasReporter = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional OptionalString EpicId = 8;
 * @return {?proto.OptionalString}
 */
proto.AddIssueMessage.prototype.getEpicid = function() {
  return /** @type{?proto.OptionalString} */ (
    jspb.Message.getWrapperField(this, issueTracker_issues_shared_pb.OptionalString, 8));
};


/**
 * @param {?proto.OptionalString|undefined} value
 * @return {!proto.AddIssueMessage} returns this
*/
proto.AddIssueMessage.prototype.setEpicid = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.AddIssueMessage} returns this
 */
proto.AddIssueMessage.prototype.clearEpicid = function() {
  return this.setEpicid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AddIssueMessage.prototype.hasEpicid = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EditIssueMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.EditIssueMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EditIssueMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EditIssueMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    title: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, ""),
    priority: jspb.Message.getFieldWithDefault(msg, 4, 0),
    type: jspb.Message.getFieldWithDefault(msg, 5, 0),
    assignee: (f = msg.getAssignee()) && issueTracker_issues_shared_pb.MaintainerMessage.toObject(includeInstance, f),
    reporter: (f = msg.getReporter()) && issueTracker_issues_shared_pb.TriageUserMessage.toObject(includeInstance, f),
    epicid: (f = msg.getEpicid()) && issueTracker_issues_shared_pb.OptionalString.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EditIssueMessage}
 */
proto.EditIssueMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EditIssueMessage;
  return proto.EditIssueMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EditIssueMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EditIssueMessage}
 */
proto.EditIssueMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {!proto.Priority} */ (reader.readEnum());
      msg.setPriority(value);
      break;
    case 5:
      var value = /** @type {!proto.IssueType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 6:
      var value = new issueTracker_issues_shared_pb.MaintainerMessage;
      reader.readMessage(value,issueTracker_issues_shared_pb.MaintainerMessage.deserializeBinaryFromReader);
      msg.setAssignee(value);
      break;
    case 7:
      var value = new issueTracker_issues_shared_pb.TriageUserMessage;
      reader.readMessage(value,issueTracker_issues_shared_pb.TriageUserMessage.deserializeBinaryFromReader);
      msg.setReporter(value);
      break;
    case 8:
      var value = new issueTracker_issues_shared_pb.OptionalString;
      reader.readMessage(value,issueTracker_issues_shared_pb.OptionalString.deserializeBinaryFromReader);
      msg.setEpicid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EditIssueMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EditIssueMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EditIssueMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EditIssueMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPriority();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getAssignee();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      issueTracker_issues_shared_pb.MaintainerMessage.serializeBinaryToWriter
    );
  }
  f = message.getReporter();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      issueTracker_issues_shared_pb.TriageUserMessage.serializeBinaryToWriter
    );
  }
  f = message.getEpicid();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      issueTracker_issues_shared_pb.OptionalString.serializeBinaryToWriter
    );
  }
};


/**
 * optional string Id = 1;
 * @return {string}
 */
proto.EditIssueMessage.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.EditIssueMessage} returns this
 */
proto.EditIssueMessage.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Title = 2;
 * @return {string}
 */
proto.EditIssueMessage.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.EditIssueMessage} returns this
 */
proto.EditIssueMessage.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string Description = 3;
 * @return {string}
 */
proto.EditIssueMessage.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.EditIssueMessage} returns this
 */
proto.EditIssueMessage.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional Priority Priority = 4;
 * @return {!proto.Priority}
 */
proto.EditIssueMessage.prototype.getPriority = function() {
  return /** @type {!proto.Priority} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.Priority} value
 * @return {!proto.EditIssueMessage} returns this
 */
proto.EditIssueMessage.prototype.setPriority = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional IssueType Type = 5;
 * @return {!proto.IssueType}
 */
proto.EditIssueMessage.prototype.getType = function() {
  return /** @type {!proto.IssueType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.IssueType} value
 * @return {!proto.EditIssueMessage} returns this
 */
proto.EditIssueMessage.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional MaintainerMessage Assignee = 6;
 * @return {?proto.MaintainerMessage}
 */
proto.EditIssueMessage.prototype.getAssignee = function() {
  return /** @type{?proto.MaintainerMessage} */ (
    jspb.Message.getWrapperField(this, issueTracker_issues_shared_pb.MaintainerMessage, 6));
};


/**
 * @param {?proto.MaintainerMessage|undefined} value
 * @return {!proto.EditIssueMessage} returns this
*/
proto.EditIssueMessage.prototype.setAssignee = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.EditIssueMessage} returns this
 */
proto.EditIssueMessage.prototype.clearAssignee = function() {
  return this.setAssignee(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EditIssueMessage.prototype.hasAssignee = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional TriageUserMessage Reporter = 7;
 * @return {?proto.TriageUserMessage}
 */
proto.EditIssueMessage.prototype.getReporter = function() {
  return /** @type{?proto.TriageUserMessage} */ (
    jspb.Message.getWrapperField(this, issueTracker_issues_shared_pb.TriageUserMessage, 7));
};


/**
 * @param {?proto.TriageUserMessage|undefined} value
 * @return {!proto.EditIssueMessage} returns this
*/
proto.EditIssueMessage.prototype.setReporter = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.EditIssueMessage} returns this
 */
proto.EditIssueMessage.prototype.clearReporter = function() {
  return this.setReporter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EditIssueMessage.prototype.hasReporter = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional OptionalString EpicId = 8;
 * @return {?proto.OptionalString}
 */
proto.EditIssueMessage.prototype.getEpicid = function() {
  return /** @type{?proto.OptionalString} */ (
    jspb.Message.getWrapperField(this, issueTracker_issues_shared_pb.OptionalString, 8));
};


/**
 * @param {?proto.OptionalString|undefined} value
 * @return {!proto.EditIssueMessage} returns this
*/
proto.EditIssueMessage.prototype.setEpicid = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.EditIssueMessage} returns this
 */
proto.EditIssueMessage.prototype.clearEpicid = function() {
  return this.setEpicid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EditIssueMessage.prototype.hasEpicid = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ResetDatabaseMesssage.prototype.toObject = function(opt_includeInstance) {
  return proto.ResetDatabaseMesssage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ResetDatabaseMesssage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ResetDatabaseMesssage.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ResetDatabaseMesssage}
 */
proto.ResetDatabaseMesssage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ResetDatabaseMesssage;
  return proto.ResetDatabaseMesssage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ResetDatabaseMesssage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ResetDatabaseMesssage}
 */
proto.ResetDatabaseMesssage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ResetDatabaseMesssage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ResetDatabaseMesssage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ResetDatabaseMesssage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ResetDatabaseMesssage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IssueCommandMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.IssueCommandMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IssueCommandMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IssueCommandMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IssueCommandMessage}
 */
proto.IssueCommandMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IssueCommandMessage;
  return proto.IssueCommandMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IssueCommandMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IssueCommandMessage}
 */
proto.IssueCommandMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IssueCommandMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IssueCommandMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IssueCommandMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IssueCommandMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string Id = 2;
 * @return {string}
 */
proto.IssueCommandMessage.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.IssueCommandMessage} returns this
 */
proto.IssueCommandMessage.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto);
