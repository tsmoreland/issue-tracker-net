// source: issueTracker.issues.queries.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var issueTracker_issues_shared_pb = require('./issueTracker.issues.shared_pb.js');
goog.object.extend(proto, issueTracker_issues_shared_pb);
goog.exportSymbol('proto.IssueByIdQueryMessage', null, global);
goog.exportSymbol('proto.IssueMessage', null, global);
goog.exportSymbol('proto.IssueStreamRequestMessage', null, global);
goog.exportSymbol('proto.IssueSummariesMessage', null, global);
goog.exportSymbol('proto.IssueSummaryMessage', null, global);
goog.exportSymbol('proto.PagedIssueRequestMessage', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PagedIssueRequestMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PagedIssueRequestMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PagedIssueRequestMessage.displayName = 'proto.PagedIssueRequestMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IssueStreamRequestMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IssueStreamRequestMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.IssueStreamRequestMessage.displayName = 'proto.IssueStreamRequestMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IssueSummaryMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IssueSummaryMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.IssueSummaryMessage.displayName = 'proto.IssueSummaryMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IssueSummariesMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.IssueSummariesMessage.repeatedFields_, null);
};
goog.inherits(proto.IssueSummariesMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.IssueSummariesMessage.displayName = 'proto.IssueSummariesMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IssueByIdQueryMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IssueByIdQueryMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.IssueByIdQueryMessage.displayName = 'proto.IssueByIdQueryMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IssueMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IssueMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.IssueMessage.displayName = 'proto.IssueMessage';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PagedIssueRequestMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.PagedIssueRequestMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PagedIssueRequestMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PagedIssueRequestMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    pagenumber: jspb.Message.getFieldWithDefault(msg, 1, 0),
    pagesize: jspb.Message.getFieldWithDefault(msg, 2, 0),
    orderby: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PagedIssueRequestMessage}
 */
proto.PagedIssueRequestMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PagedIssueRequestMessage;
  return proto.PagedIssueRequestMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PagedIssueRequestMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PagedIssueRequestMessage}
 */
proto.PagedIssueRequestMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPagenumber(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPagesize(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderby(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PagedIssueRequestMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PagedIssueRequestMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PagedIssueRequestMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PagedIssueRequestMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPagenumber();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getPagesize();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getOrderby();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int32 PageNumber = 1;
 * @return {number}
 */
proto.PagedIssueRequestMessage.prototype.getPagenumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PagedIssueRequestMessage} returns this
 */
proto.PagedIssueRequestMessage.prototype.setPagenumber = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 PageSize = 2;
 * @return {number}
 */
proto.PagedIssueRequestMessage.prototype.getPagesize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.PagedIssueRequestMessage} returns this
 */
proto.PagedIssueRequestMessage.prototype.setPagesize = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string OrderBy = 3;
 * @return {string}
 */
proto.PagedIssueRequestMessage.prototype.getOrderby = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.PagedIssueRequestMessage} returns this
 */
proto.PagedIssueRequestMessage.prototype.setOrderby = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IssueStreamRequestMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.IssueStreamRequestMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IssueStreamRequestMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IssueStreamRequestMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    orderby: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IssueStreamRequestMessage}
 */
proto.IssueStreamRequestMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IssueStreamRequestMessage;
  return proto.IssueStreamRequestMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IssueStreamRequestMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IssueStreamRequestMessage}
 */
proto.IssueStreamRequestMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderby(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IssueStreamRequestMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IssueStreamRequestMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IssueStreamRequestMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IssueStreamRequestMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrderby();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string OrderBy = 1;
 * @return {string}
 */
proto.IssueStreamRequestMessage.prototype.getOrderby = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.IssueStreamRequestMessage} returns this
 */
proto.IssueStreamRequestMessage.prototype.setOrderby = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IssueSummaryMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.IssueSummaryMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IssueSummaryMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IssueSummaryMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    title: jspb.Message.getFieldWithDefault(msg, 2, ""),
    priority: jspb.Message.getFieldWithDefault(msg, 3, 0),
    type: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IssueSummaryMessage}
 */
proto.IssueSummaryMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IssueSummaryMessage;
  return proto.IssueSummaryMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IssueSummaryMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IssueSummaryMessage}
 */
proto.IssueSummaryMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 3:
      var value = /** @type {!proto.Priority} */ (reader.readEnum());
      msg.setPriority(value);
      break;
    case 4:
      var value = /** @type {!proto.IssueType} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IssueSummaryMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IssueSummaryMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IssueSummaryMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IssueSummaryMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPriority();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional string Id = 1;
 * @return {string}
 */
proto.IssueSummaryMessage.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.IssueSummaryMessage} returns this
 */
proto.IssueSummaryMessage.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Title = 2;
 * @return {string}
 */
proto.IssueSummaryMessage.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.IssueSummaryMessage} returns this
 */
proto.IssueSummaryMessage.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Priority Priority = 3;
 * @return {!proto.Priority}
 */
proto.IssueSummaryMessage.prototype.getPriority = function() {
  return /** @type {!proto.Priority} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.Priority} value
 * @return {!proto.IssueSummaryMessage} returns this
 */
proto.IssueSummaryMessage.prototype.setPriority = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional IssueType Type = 4;
 * @return {!proto.IssueType}
 */
proto.IssueSummaryMessage.prototype.getType = function() {
  return /** @type {!proto.IssueType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.IssueType} value
 * @return {!proto.IssueSummaryMessage} returns this
 */
proto.IssueSummaryMessage.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.IssueSummariesMessage.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IssueSummariesMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.IssueSummariesMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IssueSummariesMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IssueSummariesMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
    pagenumber: jspb.Message.getFieldWithDefault(msg, 2, 0),
    total: jspb.Message.getFieldWithDefault(msg, 3, 0),
    summariesList: jspb.Message.toObjectList(msg.getSummariesList(),
    proto.IssueSummaryMessage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IssueSummariesMessage}
 */
proto.IssueSummariesMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IssueSummariesMessage;
  return proto.IssueSummariesMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IssueSummariesMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IssueSummariesMessage}
 */
proto.IssueSummariesMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ResultCode} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPagenumber(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotal(value);
      break;
    case 4:
      var value = new proto.IssueSummaryMessage;
      reader.readMessage(value,proto.IssueSummaryMessage.deserializeBinaryFromReader);
      msg.addSummaries(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IssueSummariesMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IssueSummariesMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IssueSummariesMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IssueSummariesMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getPagenumber();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getTotal();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getSummariesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.IssueSummaryMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResultCode Status = 1;
 * @return {!proto.ResultCode}
 */
proto.IssueSummariesMessage.prototype.getStatus = function() {
  return /** @type {!proto.ResultCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.ResultCode} value
 * @return {!proto.IssueSummariesMessage} returns this
 */
proto.IssueSummariesMessage.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int32 PageNumber = 2;
 * @return {number}
 */
proto.IssueSummariesMessage.prototype.getPagenumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.IssueSummariesMessage} returns this
 */
proto.IssueSummariesMessage.prototype.setPagenumber = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 Total = 3;
 * @return {number}
 */
proto.IssueSummariesMessage.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.IssueSummariesMessage} returns this
 */
proto.IssueSummariesMessage.prototype.setTotal = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated IssueSummaryMessage Summaries = 4;
 * @return {!Array<!proto.IssueSummaryMessage>}
 */
proto.IssueSummariesMessage.prototype.getSummariesList = function() {
  return /** @type{!Array<!proto.IssueSummaryMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.IssueSummaryMessage, 4));
};


/**
 * @param {!Array<!proto.IssueSummaryMessage>} value
 * @return {!proto.IssueSummariesMessage} returns this
*/
proto.IssueSummariesMessage.prototype.setSummariesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.IssueSummaryMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.IssueSummaryMessage}
 */
proto.IssueSummariesMessage.prototype.addSummaries = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.IssueSummaryMessage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.IssueSummariesMessage} returns this
 */
proto.IssueSummariesMessage.prototype.clearSummariesList = function() {
  return this.setSummariesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IssueByIdQueryMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.IssueByIdQueryMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IssueByIdQueryMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IssueByIdQueryMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IssueByIdQueryMessage}
 */
proto.IssueByIdQueryMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IssueByIdQueryMessage;
  return proto.IssueByIdQueryMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IssueByIdQueryMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IssueByIdQueryMessage}
 */
proto.IssueByIdQueryMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IssueByIdQueryMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IssueByIdQueryMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IssueByIdQueryMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IssueByIdQueryMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string Id = 1;
 * @return {string}
 */
proto.IssueByIdQueryMessage.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.IssueByIdQueryMessage} returns this
 */
proto.IssueByIdQueryMessage.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IssueMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.IssueMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IssueMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IssueMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
    id: jspb.Message.getFieldWithDefault(msg, 2, ""),
    title: jspb.Message.getFieldWithDefault(msg, 3, ""),
    description: jspb.Message.getFieldWithDefault(msg, 4, ""),
    priority: jspb.Message.getFieldWithDefault(msg, 5, 0),
    type: jspb.Message.getFieldWithDefault(msg, 6, 0),
    state: jspb.Message.getFieldWithDefault(msg, 7, 0),
    assignee: (f = msg.getAssignee()) && issueTracker_issues_shared_pb.MaintainerMessage.toObject(includeInstance, f),
    reporter: (f = msg.getReporter()) && issueTracker_issues_shared_pb.TriageUserMessage.toObject(includeInstance, f),
    epicid: (f = msg.getEpicid()) && issueTracker_issues_shared_pb.OptionalString.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IssueMessage}
 */
proto.IssueMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IssueMessage;
  return proto.IssueMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IssueMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IssueMessage}
 */
proto.IssueMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ResultCode} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 5:
      var value = /** @type {!proto.Priority} */ (reader.readEnum());
      msg.setPriority(value);
      break;
    case 6:
      var value = /** @type {!proto.IssueType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 7:
      var value = /** @type {!proto.IssueState} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 8:
      var value = new issueTracker_issues_shared_pb.MaintainerMessage;
      reader.readMessage(value,issueTracker_issues_shared_pb.MaintainerMessage.deserializeBinaryFromReader);
      msg.setAssignee(value);
      break;
    case 9:
      var value = new issueTracker_issues_shared_pb.TriageUserMessage;
      reader.readMessage(value,issueTracker_issues_shared_pb.TriageUserMessage.deserializeBinaryFromReader);
      msg.setReporter(value);
      break;
    case 10:
      var value = new issueTracker_issues_shared_pb.OptionalString;
      reader.readMessage(value,issueTracker_issues_shared_pb.OptionalString.deserializeBinaryFromReader);
      msg.setEpicid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IssueMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IssueMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IssueMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IssueMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPriority();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getAssignee();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      issueTracker_issues_shared_pb.MaintainerMessage.serializeBinaryToWriter
    );
  }
  f = message.getReporter();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      issueTracker_issues_shared_pb.TriageUserMessage.serializeBinaryToWriter
    );
  }
  f = message.getEpicid();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      issueTracker_issues_shared_pb.OptionalString.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResultCode Status = 1;
 * @return {!proto.ResultCode}
 */
proto.IssueMessage.prototype.getStatus = function() {
  return /** @type {!proto.ResultCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.ResultCode} value
 * @return {!proto.IssueMessage} returns this
 */
proto.IssueMessage.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string Id = 2;
 * @return {string}
 */
proto.IssueMessage.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.IssueMessage} returns this
 */
proto.IssueMessage.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string Title = 3;
 * @return {string}
 */
proto.IssueMessage.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.IssueMessage} returns this
 */
proto.IssueMessage.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string Description = 4;
 * @return {string}
 */
proto.IssueMessage.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.IssueMessage} returns this
 */
proto.IssueMessage.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional Priority Priority = 5;
 * @return {!proto.Priority}
 */
proto.IssueMessage.prototype.getPriority = function() {
  return /** @type {!proto.Priority} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.Priority} value
 * @return {!proto.IssueMessage} returns this
 */
proto.IssueMessage.prototype.setPriority = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional IssueType Type = 6;
 * @return {!proto.IssueType}
 */
proto.IssueMessage.prototype.getType = function() {
  return /** @type {!proto.IssueType} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.IssueType} value
 * @return {!proto.IssueMessage} returns this
 */
proto.IssueMessage.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional IssueState State = 7;
 * @return {!proto.IssueState}
 */
proto.IssueMessage.prototype.getState = function() {
  return /** @type {!proto.IssueState} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.IssueState} value
 * @return {!proto.IssueMessage} returns this
 */
proto.IssueMessage.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional MaintainerMessage Assignee = 8;
 * @return {?proto.MaintainerMessage}
 */
proto.IssueMessage.prototype.getAssignee = function() {
  return /** @type{?proto.MaintainerMessage} */ (
    jspb.Message.getWrapperField(this, issueTracker_issues_shared_pb.MaintainerMessage, 8));
};


/**
 * @param {?proto.MaintainerMessage|undefined} value
 * @return {!proto.IssueMessage} returns this
*/
proto.IssueMessage.prototype.setAssignee = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.IssueMessage} returns this
 */
proto.IssueMessage.prototype.clearAssignee = function() {
  return this.setAssignee(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.IssueMessage.prototype.hasAssignee = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional TriageUserMessage Reporter = 9;
 * @return {?proto.TriageUserMessage}
 */
proto.IssueMessage.prototype.getReporter = function() {
  return /** @type{?proto.TriageUserMessage} */ (
    jspb.Message.getWrapperField(this, issueTracker_issues_shared_pb.TriageUserMessage, 9));
};


/**
 * @param {?proto.TriageUserMessage|undefined} value
 * @return {!proto.IssueMessage} returns this
*/
proto.IssueMessage.prototype.setReporter = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.IssueMessage} returns this
 */
proto.IssueMessage.prototype.clearReporter = function() {
  return this.setReporter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.IssueMessage.prototype.hasReporter = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional OptionalString EpicId = 10;
 * @return {?proto.OptionalString}
 */
proto.IssueMessage.prototype.getEpicid = function() {
  return /** @type{?proto.OptionalString} */ (
    jspb.Message.getWrapperField(this, issueTracker_issues_shared_pb.OptionalString, 10));
};


/**
 * @param {?proto.OptionalString|undefined} value
 * @return {!proto.IssueMessage} returns this
*/
proto.IssueMessage.prototype.setEpicid = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.IssueMessage} returns this
 */
proto.IssueMessage.prototype.clearEpicid = function() {
  return this.setEpicid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.IssueMessage.prototype.hasEpicid = function() {
  return jspb.Message.getField(this, 10) != null;
};


goog.object.extend(exports, proto);
