// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using IssueTracker.Issues.Domain.Configuration.ValueConverters;
using IssueTracker.Issues.Domain.ModelAggregates.IssueAggregate;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable enable

namespace IssueTracker.Issues.Infrastructure.CompiledModels
{
    internal partial class IssueLinkEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType? baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "IssueTracker.Issues.Domain.ModelAggregates.IssueAggregate.IssueLink",
                typeof(IssueLink),
                baseEntityType);

            var leftId = runtimeEntityType.AddProperty(
                "LeftId",
                typeof(IssueIdentifier),
                propertyInfo: typeof(IssueLink).GetProperty("LeftId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IssueLink).GetField("<LeftId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                valueConverter: new IssueIdentifierValueConverter());

            var rightId = runtimeEntityType.AddProperty(
                "RightId",
                typeof(IssueIdentifier),
                propertyInfo: typeof(IssueLink).GetProperty("RightId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IssueLink).GetField("<RightId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                valueConverter: new IssueIdentifierValueConverter());

            var link = runtimeEntityType.AddProperty(
                "Link",
                typeof(LinkType),
                propertyInfo: typeof(IssueLink).GetProperty("Link", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IssueLink).GetField("<Link>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd);
            link.AddAnnotation("Relational:DefaultValue", LinkType.Related);

            var key = runtimeEntityType.AddKey(
                new[] { leftId, rightId });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { rightId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("LeftId")! },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id")! })!,
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                required: true);

            var left = declaringEntityType.AddNavigation("Left",
                runtimeForeignKey,
                onDependent: true,
                typeof(Issue),
                propertyInfo: typeof(IssueLink).GetProperty("Left", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IssueLink).GetField("<Left>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var _relatedTo = principalEntityType.AddNavigation("_relatedTo",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<IssueLink>),
                fieldInfo: typeof(Issue).GetField("_relatedTo", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("RightId")! },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id")! })!,
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                required: true);

            var right = declaringEntityType.AddNavigation("Right",
                runtimeForeignKey,
                onDependent: true,
                typeof(Issue),
                propertyInfo: typeof(IssueLink).GetProperty("Right", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IssueLink).GetField("<Right>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var _relatedFrom = principalEntityType.AddNavigation("_relatedFrom",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<IssueLink>),
                fieldInfo: typeof(Issue).GetField("_relatedFrom", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "IssueLinks");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
