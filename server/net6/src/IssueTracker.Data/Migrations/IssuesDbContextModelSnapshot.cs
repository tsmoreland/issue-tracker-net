// <auto-generated />
using System;
using IssueTracker.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IssueTracker.Data.Migrations
{
    [DbContext(typeof(IssuesDbContext))]
    partial class IssuesDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.4");

            modelBuilder.Entity("IssueTracker.Core.Model.Issue", b =>
                {
                    b.Property<Guid>("IssueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("IssueNumber")
                        .HasColumnType("INTEGER");

                    b.Property<long>("LastUpdated")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Project")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("IssueId");

                    b.HasIndex("Id");

                    b.HasIndex("IssueNumber");

                    b.HasIndex("Priority");

                    b.HasIndex("Project");

                    b.HasIndex("Title");

                    b.ToTable("Issues", (string)null);

                    b.HasData(
                        new
                        {
                            IssueId = new Guid("fb648532-026f-447c-a9c7-996fac6a8b2e"),
                            ConcurrencyToken = "bad845f6-cdb9-4148-b24c-051d783796ff",
                            Description = "add projects and use project id as link between issue and project",
                            Id = "APP-1",
                            IssueNumber = 1,
                            LastUpdated = 637766370000000000L,
                            Priority = 2,
                            Project = "APP",
                            Title = "Add Project support",
                            Type = 0
                        },
                        new
                        {
                            IssueId = new Guid("9776c88f-d2cc-4e01-8d34-56710cbd2be4"),
                            ConcurrencyToken = "4446f14e-71e1-415a-aab4-78bdae749755",
                            Description = "",
                            Id = "APP-2",
                            IssueNumber = 2,
                            LastUpdated = 637766376000000000L,
                            Priority = 1,
                            Project = "APP",
                            Title = "The database should story issues with links to projects",
                            Type = 1
                        },
                        new
                        {
                            IssueId = new Guid("1642a18b-96a1-46f0-a834-5fcb72e14aaa"),
                            ConcurrencyToken = "e86ac0ac-80ba-4108-8aa3-7265c8240a68",
                            Description = "As a user I want to be able to retreive all projects",
                            Id = "APP-3",
                            IssueNumber = 3,
                            LastUpdated = 637766379000000000L,
                            Priority = 0,
                            Project = "APP",
                            Title = "The api should be able to retrieve projects",
                            Type = 1
                        },
                        new
                        {
                            IssueId = new Guid("ef0b233b-bed3-4027-9ed9-010fe00ecf2f"),
                            ConcurrencyToken = "474effa9-b4a4-4a0b-ad02-2d2c5490aad1",
                            Description = "add the model(s) for project type ensuring it's id matches the expectations of issue",
                            Id = "APP-4",
                            IssueNumber = 4,
                            LastUpdated = 637767216000000000L,
                            Priority = 1,
                            Project = "APP",
                            Title = "add project core models",
                            Type = 2
                        },
                        new
                        {
                            IssueId = new Guid("b3941d54-f1f9-4b90-9e84-c7f33cee6d97"),
                            ConcurrencyToken = "b32115cc-d27b-4aeb-b9fc-5a50f6b4ae33",
                            Description = "add the request handlers to get projects by id and a summary",
                            Id = "APP-5",
                            IssueNumber = 5,
                            LastUpdated = 637768143000000000L,
                            Priority = 0,
                            Project = "APP",
                            Title = "add mediator request/handlers for project query",
                            Type = 2
                        });
                });

            modelBuilder.Entity("IssueTracker.Core.ValueObjects.LinkedIssue", b =>
                {
                    b.Property<Guid>("ParentIssueId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ChildIssueId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ChildId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<int>("LinkType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ParentId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ParentIssueId", "ChildIssueId");

                    b.HasIndex("ChildId");

                    b.HasIndex("ChildIssueId");

                    b.HasIndex("ParentId");

                    b.ToTable("LinkedIssues", (string)null);

                    b.HasData(
                        new
                        {
                            ParentIssueId = new Guid("ef0b233b-bed3-4027-9ed9-010fe00ecf2f"),
                            ChildIssueId = new Guid("b3941d54-f1f9-4b90-9e84-c7f33cee6d97"),
                            ChildId = "APP-5",
                            ConcurrencyToken = "198375d6-fc95-4d80-92e1-96f7c1438d58",
                            LinkType = 2,
                            ParentId = "APP-4"
                        },
                        new
                        {
                            ParentIssueId = new Guid("9776c88f-d2cc-4e01-8d34-56710cbd2be4"),
                            ChildIssueId = new Guid("1642a18b-96a1-46f0-a834-5fcb72e14aaa"),
                            ChildId = "APP-3",
                            ConcurrencyToken = "95904269-574f-4135-9ed2-3abd801e15e9",
                            LinkType = 0,
                            ParentId = "APP-2"
                        });
                });

            modelBuilder.Entity("IssueTracker.Core.Model.Issue", b =>
                {
                    b.OwnsOne("IssueTracker.Core.ValueObjects.Maintainer", "Assignee", b1 =>
                        {
                            b1.Property<Guid>("IssueId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("FullName")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(200)
                                .IsUnicode(true)
                                .HasColumnType("TEXT")
                                .HasDefaultValue("Unassigned");

                            b1.Property<Guid>("UserId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("TEXT")
                                .HasDefaultValue(new Guid("00000000-0000-0000-0000-000000000000"));

                            b1.HasKey("IssueId");

                            b1.ToTable("Issues");

                            b1.WithOwner()
                                .HasForeignKey("IssueId");
                        });

                    b.OwnsOne("IssueTracker.Core.ValueObjects.TriageUser", "Reporter", b1 =>
                        {
                            b1.Property<Guid>("IssueId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("FullName")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(200)
                                .IsUnicode(true)
                                .HasColumnType("TEXT")
                                .HasDefaultValue("Unassigned");

                            b1.Property<Guid>("UserId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("TEXT")
                                .HasDefaultValue(new Guid("00000000-0000-0000-0000-000000000000"));

                            b1.HasKey("IssueId");

                            b1.ToTable("Issues");

                            b1.WithOwner()
                                .HasForeignKey("IssueId");
                        });

                    b.Navigation("Assignee")
                        .IsRequired();

                    b.Navigation("Reporter")
                        .IsRequired();
                });

            modelBuilder.Entity("IssueTracker.Core.ValueObjects.LinkedIssue", b =>
                {
                    b.HasOne("IssueTracker.Core.Model.Issue", "ChildIssue")
                        .WithMany("ChildIssueEntities")
                        .HasForeignKey("ChildIssueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IssueTracker.Core.Model.Issue", "ParentIssue")
                        .WithMany("ParentIssueEntities")
                        .HasForeignKey("ParentIssueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChildIssue");

                    b.Navigation("ParentIssue");
                });

            modelBuilder.Entity("IssueTracker.Core.Model.Issue", b =>
                {
                    b.Navigation("ChildIssueEntities");

                    b.Navigation("ParentIssueEntities");
                });
#pragma warning restore 612, 618
        }
    }
}
