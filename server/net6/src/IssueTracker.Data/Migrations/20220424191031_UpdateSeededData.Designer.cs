// <auto-generated />
using System;
using IssueTracker.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IssueTracker.Data.Migrations
{
    [DbContext(typeof(IssuesDbContext))]
    [Migration("20220424191031_UpdateSeededData")]
    partial class UpdateSeededData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.4");

            modelBuilder.Entity("IssueTracker.Core.Model.Issue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Priority");

                    b.HasIndex("Title");

                    b.ToTable("Issues", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1385056e-8afa-4e09-96df-ae12efdf1a29"),
                            ConcurrencyToken = "bcc736d3-3bfe-4d17-b78b-28f6607609b9",
                            Description = "First issue",
                            LastUpdated = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Priority = 1,
                            Title = "First",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("a28b8c45-6668-4169-940c-c16d71eb69de"),
                            ConcurrencyToken = "25b0b4c8-101c-445b-8242-05b61759ba00",
                            Description = "Second issue",
                            LastUpdated = new DateTime(2022, 1, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            Priority = 0,
                            Title = "Second",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("502ad68e-7b37-4426-b422-23b6a9b1b7ca"),
                            ConcurrencyToken = "2727e28c-bd95-4366-8a96-821fcc63ef9d",
                            Description = "Third issue",
                            LastUpdated = new DateTime(2022, 1, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            Priority = 1,
                            Title = "Third",
                            Type = 1
                        });
                });

            modelBuilder.Entity("IssueTracker.Core.Model.LinkedIssue", b =>
                {
                    b.Property<Guid>("ParentIssueId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ChildIssueId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyToken")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("LinkType")
                        .HasColumnType("INTEGER");

                    b.HasKey("ParentIssueId", "ChildIssueId");

                    b.HasIndex("ChildIssueId");

                    b.HasIndex("ParentIssueId");

                    b.ToTable("LinkedIssue", (string)null);

                    b.HasData(
                        new
                        {
                            ParentIssueId = new Guid("a28b8c45-6668-4169-940c-c16d71eb69de"),
                            ChildIssueId = new Guid("502ad68e-7b37-4426-b422-23b6a9b1b7ca"),
                            ConcurrencyToken = "8b72b6ef-d05b-4a5b-8ee2-91821c08d0e0",
                            Id = new Guid("2bb51033-476e-4ca0-bfd7-d1aaeafd9b1c"),
                            LinkType = 0
                        });
                });

            modelBuilder.Entity("IssueTracker.Core.Model.Issue", b =>
                {
                    b.OwnsOne("IssueTracker.Core.ValueObjects.User", "Assignee", b1 =>
                        {
                            b1.Property<Guid>("IssueId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("FullName")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(200)
                                .IsUnicode(true)
                                .HasColumnType("TEXT")
                                .HasDefaultValue("Unassigned")
                                .HasColumnName("AssigneeFullName");

                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("TEXT")
                                .HasDefaultValue(new Guid("00000000-0000-0000-0000-000000000000"))
                                .HasColumnName("AssigneeId");

                            b1.HasKey("IssueId");

                            b1.ToTable("Issues");

                            b1.WithOwner()
                                .HasForeignKey("IssueId");
                        });

                    b.OwnsOne("IssueTracker.Core.ValueObjects.User", "Reporter", b1 =>
                        {
                            b1.Property<Guid>("IssueId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("FullName")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(200)
                                .IsUnicode(true)
                                .HasColumnType("TEXT")
                                .HasDefaultValue("Unassigned")
                                .HasColumnName("ReporterFullName");

                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("TEXT")
                                .HasDefaultValue(new Guid("00000000-0000-0000-0000-000000000000"))
                                .HasColumnName("ReporterId");

                            b1.HasKey("IssueId");

                            b1.ToTable("Issues");

                            b1.WithOwner()
                                .HasForeignKey("IssueId");
                        });

                    b.Navigation("Assignee")
                        .IsRequired();

                    b.Navigation("Reporter")
                        .IsRequired();
                });

            modelBuilder.Entity("IssueTracker.Core.Model.LinkedIssue", b =>
                {
                    b.HasOne("IssueTracker.Core.Model.Issue", "ChildIssue")
                        .WithMany("ChildIssueEntities")
                        .HasForeignKey("ChildIssueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IssueTracker.Core.Model.Issue", "ParentIssue")
                        .WithMany("ParentIssueEntities")
                        .HasForeignKey("ParentIssueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChildIssue");

                    b.Navigation("ParentIssue");
                });

            modelBuilder.Entity("IssueTracker.Core.Model.Issue", b =>
                {
                    b.Navigation("ChildIssueEntities");

                    b.Navigation("ParentIssueEntities");
                });
#pragma warning restore 612, 618
        }
    }
}
