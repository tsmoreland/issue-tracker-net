// <auto-generated />
using System;
using System.Reflection;
using IssueTracker.Issues.Domain.Configuration.ValueConverters;
using IssueTracker.Issues.Domain.DataContracts;
using IssueTracker.Issues.Domain.ModelAggregates.IssueAggregate;
using IssueTracker.Issues.Domain.ModelAggregates.IssueAggregate.State;
using IssueTracker.Issues.Infrastructure.Configurations.ValueConverters;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable enable

namespace IssueTracker.Issues.Infrastructure.CompiledModels
{
    internal partial class IssueEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType? baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "IssueTracker.Issues.Domain.ModelAggregates.IssueAggregate.Issue",
                typeof(Issue),
                baseEntityType);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(IssueIdentifier),
                propertyInfo: typeof(Issue).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Issue).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                valueConverter: new IssueIdentifierValueConverter());

            var concurrencyToken = runtimeEntityType.AddProperty(
                "ConcurrencyToken",
                typeof(string),
                propertyInfo: typeof(Issue).GetProperty("ConcurrencyToken", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Issue).GetField("<ConcurrencyToken>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                concurrencyToken: true);

            var lastModifiedTime = runtimeEntityType.AddProperty(
                "LastModifiedTime",
                typeof(DateTimeOffset),
                propertyInfo: typeof(Entity).GetProperty("LastModifiedTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Entity).GetField("<LastModifiedTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new DateTimeOffsetValueConverter());

            var priority = runtimeEntityType.AddProperty(
                "Priority",
                typeof(Priority),
                propertyInfo: typeof(Issue).GetProperty("Priority", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Issue).GetField("<Priority>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var state = runtimeEntityType.AddProperty(
                "State",
                typeof(IssueState),
                propertyInfo: typeof(Issue).GetProperty("State", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Issue).GetField("<State>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new IssueStateValueConverter());

            var _description = runtimeEntityType.AddProperty(
                "_description",
                typeof(string),
                fieldInfo: typeof(Issue).GetField("_description", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field,
                maxLength: 500,
                unicode: true);
            _description.AddAnnotation("Relational:ColumnName", "Description");

            var _epicId = runtimeEntityType.AddProperty(
                "_epicId",
                typeof(IssueIdentifier?),
                fieldInfo: typeof(Issue).GetField("_epicId", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field,
                nullable: true,
                valueConverter: new NullableIssueIdentifierValueConverter());
            _epicId.AddAnnotation("Relational:ColumnName", "EpicId");

            var _issueNumber = runtimeEntityType.AddProperty(
                "_issueNumber",
                typeof(int),
                fieldInfo: typeof(Issue).GetField("_issueNumber", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);
            _issueNumber.AddAnnotation("Relational:ColumnName", "IssueNumber");

            var _project = runtimeEntityType.AddProperty(
                "_project",
                typeof(string),
                fieldInfo: typeof(Issue).GetField("_project", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field,
                maxLength: 3,
                unicode: false);
            _project.AddAnnotation("Relational:ColumnName", "Project");

            var _title = runtimeEntityType.AddProperty(
                "_title",
                typeof(string),
                fieldInfo: typeof(Issue).GetField("_title", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field,
                maxLength: 200,
                unicode: true);
            _title.AddAnnotation("Relational:ColumnName", "Title");

            var _type = runtimeEntityType.AddProperty(
                "_type",
                typeof(IssueType),
                fieldInfo: typeof(Issue).GetField("_type", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);
            _type.AddAnnotation("Relational:ColumnName", "Type");

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { priority });

            var index0 = runtimeEntityType.AddIndex(
                new[] { _epicId });

            var index1 = runtimeEntityType.AddIndex(
                new[] { _issueNumber });

            var index2 = runtimeEntityType.AddIndex(
                new[] { _project });

            var index3 = runtimeEntityType.AddIndex(
                new[] { _title });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("_epicId")! },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id")! })!,
                principalEntityType,
                deleteBehavior: DeleteBehavior.NoAction);

            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "Issues");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
